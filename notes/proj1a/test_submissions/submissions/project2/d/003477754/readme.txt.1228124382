 --------
| Notes: |
 --------

If BTreeIndex exists, the first thing we do is to scan the conditions stored in a vector as argument and check for ranges of keys to consider as 
well as equality conditions.  If multiple equality conditions occur, and not all equate to the same value then the the query results in empty 
set.  Similarly, if an equality condition occur for a key value that is outside of set range then  

Assumption: Key values are nonnegative
			

 ------------------------
| Newly added functions: |
 ------------------------

Additional proxy functions
1) print_tuple		-> given an attribute, key, and value print the tuple
2) value_cond		-> given a condition statement, its bound, equality condition, decide if a string value satisfies that condition

 -------------------
| Additional Notes: |
 -------------------
- For finding tuples with index, we always set ranges first by looking at all conditions in the vector.  We always assume
that only >= or <= is used.  For example, if a condition is set as "key > 10" we set lower bound range as "key >= 11".  Similarly
with "key < 100" we set upper bound range as "key <= 99".  That way when we are actually looking for tuples using index, we can 
directly use locate.

- When setting upper/lower bounds for values, we have a boolean condition that remembers the kind of comparison that we have.  For example
if condition is set as value < 'abcd' AND value >= 'a', then u_vBound = 'abcd' and l_vBound = 'a' with isUpperBoundEq set to true (<) and 
isLowerBoundEq set to true (>=) 

- < takes precedence over <= because in upperBound, we want a smaller bound
- > takes precedence over >= because in lowerBound, we want a larger bound