 --------
| Notes: |
 --------

Assumption: Location of root and height of tree is stored in page 0 
	    : When treeHeight is 1, then the root node is a leafNode
		otherwise if treeHeight is more than 1, then root is always a nonLeafNode

##################################
# Page 0 of BTreeIndex PageFile: #
##################################

Byte 0-3 Pid of root
Byte 4-7 Height of tree

All the other pages in this pagefile are basically nodes in the tree (either BTLeafNode or BTNonLeafNode)

 ------------------------
| Newly added functions: |
 ------------------------

1) getRootPid		-> returns the pid of root node
2) getTreeHeight		-> returns the height of the tree
3) getParentPid		-> given a node, returns pid of parent
4) insert_in_parent	-> when a node is split, call this function 
5) locate_helper		-> given a key value, return pid of the node that contains a value greater than or 
				   equal to key

Additional proxy functions
1) print_node
2) print_tree
3) print_tree_helper

 -------------------
| Additional Notes: |
 -------------------

- pid of root and height of tree is updated when the BTreeIndex is closed.
- insert takes care of 2 special cases: when the index is new and when height is 1
- insert_in_parent is a recursive function, it helps insert function by taking care
of inserting new item to parent and subsequent upward cascade.