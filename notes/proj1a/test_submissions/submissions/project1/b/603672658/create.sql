/*  Project: 1B  Course: CS143  Date: Friday, October 19, 2008  Presented by: James Chung & Nizar Almoussa  File Name: create.sql*//* We first assure none of the nine tables exists */DROP TABLE IF EXISTS MovieDirector;DROP TABLE IF EXISTS MovieActor; DROP TABLE IF EXISTS MovieGenre;DROP TABLE IF EXISTS Review; DROP TABLE IF EXISTS Movie;DROP TABLE IF EXISTS Actor;DROP TABLE IF EXISTS Director;DROP TABLE IF EXISTS MaxPersonID;DROP TABLE IF EXISTS MaxMovieID;CREATE TABLE Movie (	/* every movie must have an identification number */	id INTEGER NOT NULL, 	/* every movie must have a title */		title VARCHAR(100) NOT NULL, 	/* We assume that we do not know the year of some old movies, 	   so the attribute year can be null. However, there is no  	   movie that was made before 1850 	*/         year INTEGER CHECK (year >= 1850),        	rating  VARCHAR(10), 	company VARCHAR(50),	/* This constraint assures every movie has a unique identification number.	   And this number is the primary key of the table Movie 	*/	PRIMARY KEY(id),	/* This constraint assures the identification number of the movie is not	   greater than MaxMovieID 	*/	CHECK (id <= (SELECT id 		     FROM   MaxMovieID))) ENGINE=INNODB; CREATE TABLE Actor (	/* every actor must have an identification number */	id INTEGER NOT NULL, 	/* every actor must have first and last names */         last  VARCHAR(20) NOT NULL,          first VARCHAR(20) NOT NULL,          	sex VARCHAR(6),	/* every actor has a date of birth */         dob DATE NOT NULL,         dod DATE,	/* This constraint assures every actor has a unique identification number.	   And this number is the primary key of the table Actor 	*/	PRIMARY KEY(id),	/* This constraint assures the date of birth comes before the date of death */	CHECK (dob < dod),	/* This constraint assures the identification number of the actor is not 	   greater than MaxPersonID	*/	CHECK (id <= (SELECT P.id FROM MaxPersonID P)),	/* This constraint assures the actor's identification number is unique among all directors	   Keep in mind an actor can be a director as well	*/	CHECK (id NOT IN (SELECT D.id 			FROM   Director D 			WHERE  D.first <> first AND D.last <> last))) ENGINE=INNODB;CREATE TABLE Director (	/* every director must have an identification number */	id INTEGER NOT NULL, 	/* every director must have first and last names */	last  VARCHAR(20) NOT NULL, 	first VARCHAR(20) NOT NULL, 	/* every director has a date of birth */	dob DATE NOT NULL,	dod DATE,	/* This constraint assures every director has a unique identification number.	   And this number is the primary key of the table Director 	*/	PRIMARY KEY(id),	/* This constraint assures the date of birth comes before the date of death */	CHECK (dob < dod),	/* This constraint assures the identification number of the director is not 	   greater than MaxPersonID	*/	CHECK (id <= (SELECT P.id FROM MaxPersonID P)),	/* This constraint assures the director's identification number is unique among all actors	   Keep in mind a director can be an actor as well	*/	CHECK (id NOT IN (SELECT A.id 			FROM   Actor A 			WHERE  A.first <> first AND A.last <> last))) ENGINE=INNODB;CREATE TABLE MovieGenre (	/* It is not possible to have a tuble in this table where either 	   the movie id or the genre of the movie is null	*/	mid INTEGER NOT NULL,	genre VARCHAR(20) NOT NULL,	/* This constraint assures the referential integrity of our database. If a movie id exists	   in MovieGenre table, it should also appear in Movie table	*/	FOREIGN KEY(mid) references Movie(id)			) ENGINE=INNODB;CREATE TABLE MovieDirector (	/* It is not possible to have a tuble in this table where either	   the movie id or the director id is null	*/	mid INTEGER NOT NULL, 	did INTEGER NOT NULL,	/* This constraint assures the referential integrity of our database. If a movie id exists	   in Moviedirector table, it should also appear in Movie table	*/	FOREIGN KEY(mid) references Movie(id),	/* This constraint assures the referential integrity of our database. If a director id exists	   in MovieDirector table, it should also appears in Director table	*/	FOREIGN KEY(did) references Director(id)) ENGINE=INNODB;CREATE TABLE MovieActor (	/* It is not possible to have a tuble in this table where either	   the movie id or the actor id is null	*/	mid INTEGER NOT NULL, 	aid INTEGER NOT NULL,	role VARCHAR(50),	/* This constraint assures the referential integrity of our database. If a movie id exists	   in MovieActor table, it should also appear in Movie table	*/	FOREIGN KEY(mid) references Movie(id),	/* This constraint assures the referential integrity of our database. If an actor id exists	   in MovieActor table, it should also appear in Actor table	*/	FOREIGN KEY(aid) references Actor(id)) ENGINE=INNODB;CREATE TABLE Review (	/* It is not possible to submit a review without specifying the reviewer name,	   the time of submitting the review, and the id number of the movie	*/	name VARCHAR(20) NOT NULL,	time TIMESTAMP NOT NULL,	mid INTEGER NOT NULL,	/* rating must be a number between 1 and 5 */	rating INTEGER CHECK (rating >= 1 AND rating <= 5),	/* submitting a commnet is optionanl; comment can be null */	comment VARCHAR(500),	/* This constraint assures the referential integrity of our database. If an movie id exists	   in Review table, it should also appear in Movie table	*/	FOREIGN KEY(mid) references Movie(id)) ENGINE = INNODB;CREATE TABLE MaxPersonID (	/* the Max person id number can not be null neither negative number */	id INTEGER NOT NULL CHECK (id > 0)) ENGINE=INNODB;CREATE TABLE MaxMovieID (	/* the Max movie id number can not be null neither negative number */	id INTEGER NOT NULL CHECK (id > 0)) ENGINE=INNODB;